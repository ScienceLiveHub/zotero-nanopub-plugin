name: Create Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v2.0.0)'
        required: true
        default: 'v2.0.0'

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        # Disable cache to ensure fresh install
        # cache: 'npm'
    
    - name: Clear npm cache and node_modules
      run: |
        echo "üóëÔ∏è Clearing npm cache to ensure fresh dependencies..."
        npm cache clean --force
        rm -rf node_modules
        rm -f package-lock.json
        echo "‚úÖ Cache cleared"
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
        VERSION_NUM=$(echo "${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref }}" | sed 's/refs\/tags\///' | sed 's/^v//')
        echo "VERSION_NUM=$VERSION_NUM" >> $GITHUB_OUTPUT
    
    - name: Update package.json version
      run: |
        VERSION_NUM="${{ steps.version.outputs.VERSION_NUM }}"
        npm version $VERSION_NUM --no-git-tag-version
        echo "Updated package.json to version $VERSION_NUM"
    
    - name: Install dependencies
      run: npm install --no-cache
    
    - name: Build nanopub-view dependency
      run: |
        echo "üì¶ Building nanopub-view library from GitHub..."
        cd node_modules/@sciencelivehub/nanopub-view
        
        echo "üìã Package contents:"
        ls -la
        
        echo "üì¶ Installing nanopub-view dependencies..."
        npm install || { echo "‚ùå npm install failed"; exit 1; }
        
        echo "üìã Checking package.json for build scripts..."
        if grep -q '"build"' package.json; then
          echo "‚úÖ Found build script in package.json"
          cat package.json | grep -A 5 '"scripts"'
          echo ""
          echo "üî® Using package's build script..."
          npm run build || { 
            echo "‚ö†Ô∏è Package build script failed, trying custom Vite config..."; 
          }
        fi
        
        # Check if build succeeded
        if [ -f "dist/nanopub-viewer.esm.js" ]; then
          echo "‚úÖ Build successful using package script!"
          ls -lah dist/
          cd ../../..
          exit 0
        fi
        
        echo "‚ö†Ô∏è No build script or build failed, using custom Vite config..."
        
        # Create a temporary library-only vite config
        echo "üìù Creating Vite config..."
        cat > vite.lib.config.js << 'VITE_EOF'
        import { defineConfig } from 'vite';
        import path from 'path';
        import { fileURLToPath } from 'url';
        
        const __dirname = path.dirname(fileURLToPath(import.meta.url));
        
        export default defineConfig({
          build: {
            outDir: 'dist',
            emptyOutDir: true,
            lib: {
              entry: path.resolve(__dirname, 'src/index.js'),
              name: 'NanopubViewer',
              formats: ['es', 'umd'],
              fileName: (format) => {
                if (format === 'es') return 'nanopub-viewer.esm.js';
                if (format === 'umd') return 'nanopub-viewer.js';
              }
            },
            rollupOptions: {
              output: {
                assetFileNames: (assetInfo) => {
                  if (assetInfo.name === 'style.css') return 'nanopub-viewer.css';
                  return assetInfo.name;
                }
              }
            }
          }
        });
        VITE_EOF
        
        # Build using the library config
        echo "üî® Building with Vite..."
        npx vite build --config vite.lib.config.js || { 
          echo "‚ùå Vite build failed!"; 
          echo "Checking for errors...";
          cat package.json | grep "type";
          exit 1; 
        }
        
        echo "üìÇ Build output:"
        ls -lah dist/ || echo "‚ùå No dist directory created!"
        
        echo "üîç Checking CSS files..."
        ls -la dist/*.css
        
        # Rename style.css to nanopub-viewer.css if it exists
        if [ -f "dist/style.css" ]; then
          echo "üìù Found style.css, renaming to nanopub-viewer.css..."
          mv -v dist/style.css dist/nanopub-viewer.css
        fi
        
        # Rename nanopub-view.css to nanopub-viewer.css if it exists  
        if [ -f "dist/nanopub-view.css" ]; then
          echo "üìù Found nanopub-view.css, renaming to nanopub-viewer.css..."
          mv -v dist/nanopub-view.css dist/nanopub-viewer.css
        fi
        
        echo "üìÇ Final dist contents after rename:"
        ls -lah dist/
        
        cd ../../..
        
        echo "‚úÖ nanopub-view built successfully"
        ls -lah node_modules/@sciencelivehub/nanopub-view/dist/
    
    - name: Verify nanopub-view build
      run: |
        echo "üîç Verifying nanopub-view build..."
        
        echo "üìç Current directory:"
        pwd
        
        echo "üì¶ nanopub-view package info:"
        echo "Git commit:"
        (cd node_modules/@sciencelivehub/nanopub-view && git log -1 --oneline 2>/dev/null) || echo "  (not a git repo)"
        echo "Package version:"
        cat node_modules/@sciencelivehub/nanopub-view/package.json | grep '"version"' || echo "  (no version found)"
        
        echo "üìÇ Files in nanopub-view/dist:"
        ls -la node_modules/@sciencelivehub/nanopub-view/dist/ || echo "‚ùå Directory not found!"
        
        if [ ! -f "node_modules/@sciencelivehub/nanopub-view/dist/nanopub-viewer.esm.js" ]; then
          echo "‚ùå ERROR: nanopub-viewer.esm.js not found!"
          exit 1
        fi
        
        if [ ! -f "node_modules/@sciencelivehub/nanopub-view/dist/nanopub-viewer.css" ]; then
          echo "‚ùå ERROR: nanopub-viewer.css not found!"
          exit 1
        fi
        
        VIEW_JS_SIZE=$(wc -c < "node_modules/@sciencelivehub/nanopub-view/dist/nanopub-viewer.esm.js")
        VIEW_CSS_SIZE=$(wc -c < "node_modules/@sciencelivehub/nanopub-view/dist/nanopub-viewer.css")
        
        echo "üìä Build file sizes:"
        echo "  - nanopub-viewer.esm.js: $VIEW_JS_SIZE bytes"
        echo "  - nanopub-viewer.css: $VIEW_CSS_SIZE bytes"
        
        if [ "$VIEW_JS_SIZE" -lt 10000 ]; then
          echo "‚ùå ERROR: nanopub-viewer.esm.js is too small ($VIEW_JS_SIZE bytes)"
          exit 1
        fi
        
        if [ "$VIEW_CSS_SIZE" -lt 1000 ]; then
          echo "‚ùå ERROR: nanopub-viewer.css is too small ($VIEW_CSS_SIZE bytes)"
          exit 1
        fi
        
        echo "‚úÖ nanopub-view verification passed!"
    
    - name: Build nanopub-create dependency
      run: |
        echo "üì¶ Building nanopub-create library from GitHub..."
        cd node_modules/@sciencelivehub/nanopub-create
        
        # Install dependencies
        npm install
        
        # Create a temporary library-only vite config
        cat > vite.lib.config.js << 'VITE_EOF'
        import { defineConfig } from 'vite';
        import path from 'path';
        import wasm from 'vite-plugin-wasm';
        import topLevelAwait from 'vite-plugin-top-level-await';
        
        export default defineConfig({
          plugins: [
            wasm(),
            topLevelAwait()
          ],
          build: {
            lib: {
              entry: path.resolve(__dirname, 'src/index.js'),
              name: 'NanopubCreator',
              formats: ['es', 'umd'],
              fileName: (format) => {
                if (format === 'es') return 'nanopub-creator.esm.js';
                if (format === 'umd') return 'nanopub-creator.js';
              }
            },
            rollupOptions: {
              output: {
                assetFileNames: (assetInfo) => {
                  if (assetInfo.name === 'style.css') return 'nanopub-creator.css';
                  return assetInfo.name;
                }
              }
            }
          }
        });
        VITE_EOF
        
        # Build using the library config
        npx vite build --config vite.lib.config.js
        
        cd ../../..
        
        echo "‚úÖ nanopub-create built successfully"
        ls -lah node_modules/@sciencelivehub/nanopub-create/dist/
    
    - name: Build plugin
      run: npm run build
    
    - name: Verify build
      run: |
        echo "‚úÖ Build completed successfully!"
        ls -lah build/
        echo ""
        echo "üì¶ XPI size:"
        du -h build/nanopub.xpi
        echo ""
        echo "üìã XPI contents (checking for nanopub-view files):"
        unzip -l build/nanopub.xpi | grep -E "(nanopub-viewer|nanopub-creator)" || echo "‚ö†Ô∏è Warning: No nanopub-view/create files found in XPI!"
        echo ""
        echo "üîç Checking if styles directory exists in XPI:"
        unzip -l build/nanopub.xpi | grep "content/styles/" || echo "‚ö†Ô∏è Warning: No styles directory found!"
    
    - name: Rename XPI with version
      run: |
        VERSION="${{ steps.version.outputs.VERSION }}"
        cp build/nanopub.xpi "nanopub-plugin-${VERSION}.xpi"
        echo "XPI_NAME=nanopub-plugin-${VERSION}.xpi" >> $GITHUB_ENV
    
    - name: Create updates.json
      run: |
        VERSION_NUM="${{ steps.version.outputs.VERSION_NUM }}"
        VERSION="${{ steps.version.outputs.VERSION }}"
        
        cat > updates.json << EOF
        {
          "addons": {
            "nanopub-plugin@sciencelivehub.com": {
              "updates": [
                {
                  "version": "$VERSION_NUM",
                  "update_link": "https://github.com/ScienceLiveHub/zotero-nanopub-plugin/releases/download/${VERSION}/nanopub-plugin-${VERSION}.xpi",
                  "applications": {
                    "zotero": {
                      "strict_min_version": "6.999",
                      "strict_max_version": "8.0.*"
                    }
                  }
                }
              ]
            }
          }
        }
        EOF
        
        echo "Created updates.json:"
        cat updates.json
    
    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: ${{ contains(steps.version.outputs.VERSION, 'beta') || contains(steps.version.outputs.VERSION, 'alpha') }}
        generate_release_notes: true
        body: |
          ## Zotero Nanopub Plugin ${{ steps.version.outputs.VERSION }}
          
          ### üì• Installation
          
          1. Download `${{ env.XPI_NAME }}` below
          2. In Zotero: **Tools ‚Üí Add-ons**
          3. Click gear icon ‚Üí **Install Add-on From File**
          4. Select the downloaded XPI
          5. Restart Zotero
          
          ### ‚ú® Features
          
          - **Import as New Item** - Create standalone nanopublication items
          - **Attach to Existing Item** - Attach nanopubs as notes to papers
          - **nanopub-view Integration** - Beautiful rendering with type-based titles
          - **Dark Mode Support** - Works seamlessly with Zotero themes
          - **Smart Tagging** - Automatic type-based organization
          
          ### üìã Requirements
          
          - Zotero 7.0 or later
          
          ### üîó Menu Items
          
          **File Menu:**
          - Import Nanopublication as New Item...
          - Import Nanopublication (Attach to Item)...
          
          **Right-click Context Menu:**
          - üìé Attach Nanopublication...
          
          ---
          
          **Download the XPI file below to install the plugin.**
        files: |
          ${{ env.XPI_NAME }}
          updates.json
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
